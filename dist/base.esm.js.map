{"version":3,"file":"base.esm.js","sources":["src/utils/props.js","src/utils/form_data.js","src/utils/Field.js","src/common/Field.vue","src/utils/Errors.js","src/common/Fields.vue","src/config.js","src/mixins/HandlesValidationErrors.js","src/mixins/FieldLayoutMixin.js","src/common/EmptyLayout.vue","src/common/Asterisk.vue","src/layouts/VericalLayout.vue","src/layouts/HorizontalLayout.vue","src/layouts/InlineLayout.vue","src/fields/Undefined.vue","src/mixins/FieldMixin.js","src/utils/FieldList.js","src/mixins/FormMixin.js","src/fields/HiddenField.vue","src/fields/TextField.vue","src/fields/NumberField.vue","src/fields/FileField.vue","src/fields/SelectField.vue","src/fields/RadiosField.vue","src/fields/CheckboxField.vue","src/fields/CheckboxesField.vue","src/fields/TextareaField.vue","src/plugin.js","src/extra-fields/config.js","src/extra-fields/AttachmentPreview.vue","src/extra-fields/AttachmentField.vue","src/extra-fields/EditorField.vue","src/extra-fields/LocationField.vue","src/extra-fields/RelationField.vue","src/extra-fields/ExtraPlugin.js"],"sourcesContent":["import Vue from 'vue';\n\nexport function setProp(obj, props, value) {\n\tif (typeof props === \"string\") {\n\t\tprops = props.split('.');\n\t}\n\n\tconst prop = props.shift();\n\n\tif (!obj[prop] && props.length) {\n\t\tVue.set(obj, prop, {});\n\t}\n\n\tif (!props.length) {\n\t\tVue.set(obj, prop, value);\n\t\treturn;\n\t}\n\n\tsetProp(obj[prop], props, value);\n}\n\nexport function getProp(obj, props) {\n\tif (typeof props === \"string\") {\n\t\tprops = props.split('.');\n\t}\n\n\tconst prop = props.shift();\n\n\tif (!obj[prop] || !props.length) {\n\t\treturn obj[prop];\n\t}\n\n\treturn getProp(obj[prop], props);\n}\n","import forOwn from \"lodash-es/forOwn\";\n\n/**\n * Append given data to formData object with given base name\n *\n * @param {FormData} formData\n * @param value\n * @param {String} name\n */\nexport function appendFormData(formData, value, name) {\n  if (value === null || value === undefined) {\n    value = '';\n  } else if (value === true) {\n    value = 1;\n  } else if (value === false) {\n    value = 0;\n  } else if (typeof value === 'object' && !(value instanceof File)) {\n    if (value instanceof Array && value.length === 0) {\n      formData.append(name, '');\n      return;\n    }\n\n    forOwn(value, (value, key) => {\n      appendFormData(formData, value, `${name}[${key}]`)\n    });\n\n    return;\n  }\n\n  formData.append(name, value);\n}\n\n/**\n * Resolves field attribute name to form data name\n *\n * @param {Object} field\n * @returns {String}\n */\nexport function formDataName(field) {\n  let name = field.attribute;\n\n  if (field.attribute.indexOf('.') !== -1) {\n    name = field\n      .attribute.replace(/\\./, '[')\n      .replace('.', '][') + ']'\n  }\n\n  return name;\n}\n","import { getProp, setProp } from './props';\nimport cloneDeep from 'lodash-es/cloneDeep';\nimport { appendFormData, formDataName } from './form_data';\n\n/**\n * @property {String} attribute\n * @property {String} component\n * @property {Boolean} multiple\n * @property {*} initialValue\n * @property {Array} depends\n * @property {Array} dependentFields\n */\nexport default class Field {\n\n  /**\n   * Construct the Field instance\n   *\n   * @param {Object} field\n   */\n  constructor(field) {\n    Object.assign(this, field);\n  }\n\n  /**\n   * Sets model value to initial value\n   *\n   * @param {Object} model\n   */\n  applyInitialValue(model) {\n    setProp(model, this.attribute, cloneDeep(this.initialValue) || (this.multiple ? [] : null));\n  }\n\n  /**\n   * Appends model value to FormValue\n   *\n   * @param {FormData} formData\n   * @param {Object} model\n   */\n  appendFormData(formData, model) {\n    appendFormData(formData, getProp(model, this.attribute), formDataName(this));\n  }\n}\n","<template>\n  <component\n    :is=\"'form-' + field.component\"\n    :field=\"field\"\n    :model=\"model\"\n    @input=\"input\"\n    :errors=\"errors\"\n    :event-bus=\"$events\"\n    :layout=\"layout\"\n  />\n</template>\n\n<script>\n  import Field from '../utils/Field';\n\n  export default {\n    name: \"Field\",\n\n    props: {\n      field: {\n        type: Field,\n        default: function () {\n          return new Field({\n            component: 'undefined'\n          })\n        }\n      },\n      model: Object,\n      errors: {},\n      eventBus: {type: Object},\n      layout: {}\n    },\n\n    computed: {\n      $events() {\n        return this.eventBus || this.$parent;\n      }\n    },\n\n    methods: {\n      input: function ($event) {\n        this.$emit('input', $event)\n      }\n    },\n  }\n</script>\n","class Errors {\n    /**\n     * Create a new Errors instance.\n     */\n    constructor(errors = {}) {\n        this.record(errors);\n    }\n\n    /**\n     * Get all the errors.\n     *\n     * @return {object}\n     */\n    all() {\n        return this.errors;\n    }\n\n    /**\n     * Determine if any errors exists for the given field or object.\n     *\n     * @param {string} field\n     */\n    has(field) {\n        let hasError = this.errors.hasOwnProperty(field);\n\n        if (!hasError) {\n            const errors = Object.keys(this.errors).filter(\n                e => e.startsWith(`${field}.`) || e.startsWith(`${field}[`)\n            );\n\n            hasError = errors.length > 0;\n        }\n\n        return hasError;\n    }\n\n    first(field) {\n        return this.get(field)[0];\n    }\n\n    get(field) {\n        return this.errors[field] || [];\n    }\n\n    /**\n     * Determine if we have any errors.\n     */\n    any() {\n        return Object.keys(this.errors).length > 0;\n    }\n\n    /**\n     * Record the new errors.\n     *\n     * @param {object} errors\n     */\n    record(errors = {}) {\n        this.errors = errors;\n    }\n\n    /**\n     * Clear a specific field, object or all error fields.\n     *\n     * @param {string|null} field\n     */\n    clear(field) {\n        if (!field) {\n            this.errors = {};\n\n            return;\n        }\n        \n        let errors = Object.assign({}, this.errors);\n\n        Object.keys(errors)\n            .filter(e => e === field || e.startsWith(`${field}.`) || e.startsWith(`${field}[`))\n            .forEach(e => delete errors[e]);\n        \n        this.errors = errors;\n    }\n}\n\nexport default Errors;\n","<template>\n  <div>\n    <field\n      v-for=\"field in fields\"\n      :key=\"field.attribute\"\n      :field=\"field\"\n      :model=\"model\"\n      :errors=\"errors\"\n      :event-bus=\"$events\"\n      :layout=\"layout\"/>\n  </div>\n</template>\n\n<script>\n  import Errors from '../utils/Errors';\n\n  export default {\n    name: \"Fields\",\n\n    props: {\n      fields: {},\n      model: Object,\n      errors: {\n        default: () => new Errors()\n      },\n      eventBus: {type: Object},\n      layout: String\n    },\n\n    computed: {\n      $events() {\n        return this.eventBus || this.$parent;\n      }\n    },\n  }\n</script>\n","let config = {\n\tdefaultLayout: 'vertical',\n\terrorMessages: 'first',\n\terrorMessagesGlue: '<br />',\n};\n\nexport default config\n","import Errors from '../utils/Errors'\nimport config from '../config';\n\nexport default {\n\tprops: {\n\t\terrors: {\n\t\t\tdefault: () => new Errors(),\n\t\t},\n\t},\n\n\tdata: () => ({\n\t\terrorClass: '',\n\t}),\n\n\tcomputed: {\n\t\terrorClasses() {\n\t\t\treturn this.hasError ? [this.errorClass] : []\n\t\t},\n\n\t\thasError() {\n\t\t\treturn this.errors.has(this.field.attribute)\n\t\t},\n\n\t\terrorMessages() {\n\t\t\tif (this.hasError && config.errorMessages) {\n\t\t\t\treturn config.errorMessages === 'first'\n\t\t\t\t\t? this.errors.first(this.field.attribute)\n\t\t\t\t\t: this.errors.get(this.field.attribute).join(config.errorMessagesGlue)\n\t\t\t}\n\t\t},\n\t},\n}\n","import HandlesValidationErrors from './HandlesValidationErrors';\n\nexport default {\n\tmixins: [ HandlesValidationErrors ],\n\n\tprops: {\n\t\tfield: {type: Object, required: true},\n\t\tfieldLabel: {type: String},\n\t\tlayoutClass: {type: String},\n\t\tshowLabel: {type: Boolean, default: true},\n\t\tshowHelpText: {type: Boolean, default: true},\n\t},\n}\n","<template>\n  <div\n    :attribute=\"field.attribute\"\n    :class=\"layoutClass\">\n    <slot name=\"field\"/>\n  </div>\n</template>\n\n<script>\n  import FieldLayoutMixin from \"../mixins/FieldLayoutMixin\";\n\n  export default {\n    mixins: [FieldLayoutMixin]\n  }\n</script>\n","<template>\n\t<sup class=\"label-asterisk text-danger\">*</sup>\n</template>\n\n<script>\n\texport default {\n\t\tname: 'FormAsterisk'\n\t}\n</script>\n\n<style type=\"text/scss\" scoped>\n\t.label-asterisk {\n\t\ttop: -.1em;\n\t\tfont-size: 1em;\n\t}\n</style>\n","<template>\n\t<div class=\"form-group\"\n         :attribute=\"field.attribute\"\n         :class=\"errorClasses\">\n\t\t<label v-if=\"showLabel\"\n\t\t\t   :for=\"field.attribute\">\n\t\t\t{{ fieldLabel || field.label }}\n\t\t\t<form-asterisk v-if=\"field.required\" />\n\t\t</label>\n\t\t<label v-else class=\"placeholder-label\"\n\t\t\t   :for=\"field.attribute\">\n\t\t\t&nbsp;\n\t\t</label>\n\t\t<slot name=\"field\"/>\n\t\t<slot name=\"errors\">\n\t\t\t<div v-if=\"hasError\"\n\t\t\t\t v-html=\"errorMessages\"\n\t\t\t\t class=\"invalid-feedback d-block\">\n\t\t\t</div>\n\t\t</slot>\n\t\t<small v-if=\"showHelpText && field.helpText\"\n\t\t\t   class=\"form-text text-muted\">\n\t\t\t{{ field.helpText }}\n\t\t</small>\n\t</div>\n</template>\n\n<script>\n\timport FieldLayoutMixin from \"../mixins/FieldLayoutMixin\";\n\n\texport default {\n\t\tmixins: [ FieldLayoutMixin ]\n\t}\n</script>\n\n<style type=\"text/scss\" scoped>\n\t.placeholder-label {\n\t\tdisplay: none;\n\t}\n\n\t.col .placeholder-label {\n\t\tdisplay: block;\n\t}\n\t[class*=\" col-\"] .placeholder-label {\n\t\tdisplay: block;\n\t}\n</style>\n","<template>\n\t<div class=\"form-group row\"\n         :attribute=\"field.attribute\"\n         :class=\"errorClasses\">\n\t\t<label v-if=\"showLabel\"\n\t\t\t   :for=\"field.attribute\"\n\t\t\t   class=\"col-sm-4 col-form-label text-sm-right\">\n\t\t\t{{ fieldLabel || field.label }}\n\t\t\t<form-asterisk v-if=\"field.required\" />\n\t\t</label>\n\t\t<div class=\"col-sm-8\" :class=\"{ 'offset-sm-4': !showLabel }\">\n\t\t\t<slot name=\"field\"/>\n\t\t\t<slot name=\"errors\">\n\t\t\t\t<div v-if=\"hasError\"\n\t\t\t\t\t v-html=\"errorMessages\"\n\t\t\t\t\t class=\"invalid-feedback d-block\">\n\t\t\t\t</div>\n\t\t\t</slot>\n\t\t\t<small v-if=\"showHelpText && field.helpText\"\n\t\t\t\t   class=\"form-text text-muted\">\n\t\t\t\t{{ field.helpText }}\n\t\t\t</small>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\timport FieldLayoutMixin from \"../mixins/FieldLayoutMixin\";\n\n\texport default {\n\t\tmixins: [ FieldLayoutMixin ]\n\t}\n</script>\n","<template>\n\t<div class=\"d-inline-block mb-2 mr-sm-2\"\n         :attribute=\"field.attribute\"\n         :class=\"errorClasses\">\n\t\t<label class=\"sr-only\" :for=\"field.attribute\">\n\t\t\t{{ field.label || fieldLabel }}\n\t\t\t<form-asterisk v-if=\"field.required\" />\n\t\t</label>\n\t\t<slot name=\"field\"/>\n\t\t<slot name=\"errors\">\n\t\t\t<div v-if=\"hasError\"\n\t\t\t\t v-html=\"errorMessages\"\n\t\t\t\t class=\"invalid-tooltip d-block\">\n\t\t\t</div>\n\t\t</slot>\n\t\t<small v-if=\"showHelpText && field.helpText\" class=\"form-text text-muted\">\n\t\t\t{{ field.helpText }}\n\t\t</small>\n\t</div>\n</template>\n\n<script>\n\timport FieldLayoutMixin from \"../mixins/FieldLayoutMixin\";\n\n\texport default {\n\t\tmixins: [ FieldLayoutMixin ]\n\t}\n</script>\n","<template>\n\n</template>\n\n<script>\n\texport default {\n\t\tname: 'FormUndefinedField'\n\t}\n</script>\n","import keyBy from \"lodash-es/keyBy\";\nimport mapValues from \"lodash-es/mapValues\";\nimport isEqual from 'lodash-es/isEqual';\nimport has from 'lodash-es/has';\nimport HandlesValidationErrors from './HandlesValidationErrors';\nimport Field from '../utils/Field';\nimport { getProp, setProp } from \"../utils/props\";\nimport config from \"../config\";\n\nexport default {\n  mixins: [HandlesValidationErrors],\n\n  props: {\n    field: {type: Field, required: true},\n    model: {type: Object},\n    eventBus: {type: Object},\n    layout: {type: String},\n    layoutClass: {type: String},\n  },\n\n  data: () => ({\n    errorClass: 'is-invalid',\n    eventBusListeners: [],\n  }),\n\n  computed: {\n    /**\n     * Used for v-model binding on input element\n     */\n    fieldValue: {\n      get() {\n        return this.value();\n      },\n      set(value) {\n        this.fill(value);\n      },\n    },\n    layoutComponent: function () {\n      return (this.layout || config.defaultLayout) + '-layout';\n    },\n    $events() {\n      return this.eventBus || this.$root;\n    }\n  },\n\n  created() {\n    if (this.model && !has(this.model, this.field.attribute)) {\n      this.field.applyInitialValue(this.model);\n    }\n\n    // Register a global event for setting the field's value\n    this.listenEventBus('field-value-' + this.field.attribute, this.fill);\n\n    if (this.field.depends && this.field.depends.length) {\n      this.field.depends.forEach(attr => {\n        this.listenEventBus('field-change-' + attr, value => {\n          this.triggerDependentChange(attr, value);\n        });\n      });\n\n      this.triggerDependentChange();\n    }\n  },\n\n  destroyed() {\n    this.unlistenEventBus();\n  },\n\n  methods: {\n\n    /**\n     * Perform some sanitize actions when filling the value\n     *\n     * @param {*} value\n     * @returns {*}\n     */\n    sanitizeValue(value) {\n      return value;\n    },\n\n    /**\n     * Update the field's value\n     * @param value\n     */\n    fill(value) {\n      let valueSet = this.sanitizeValue(value);\n\n      if (isEqual(valueSet, this.value())) {\n        return;\n      }\n\n      if (this.model) {\n        setProp(this.model, this.field.attribute, valueSet);\n      }\n\n      this.triggerChange();\n    },\n\n    /**\n     * Get field's value\n     * @returns {*}\n     */\n    value() {\n      return this.model ? getProp(this.model, this.field.attribute) : (this.field.multiple ? [] : null);\n    },\n\n    triggerChange() {\n      this.$events.$emit('field-change', this.value(), this.field.attribute);\n      this.$events.$emit('field-change-' + this.field.attribute, this.value());\n    },\n\n    triggerDependentChange(attribute, value) {\n      let values = mapValues(keyBy(this.field.dependentFields, 'attribute'), (field) => {\n        return getProp(this.model, field.attribute);\n      });\n      this.handleDependentChange(attribute, value, values);\n    },\n\n    handleDependentChange(attribute, value, values) {\n      // console.log(this.field.attribute + ':handleDependentChange', arguments)\n    },\n\n    listenEventBus(event, callback) {\n      this.$events.$on(event, callback);\n      this.eventBusListeners.push({ event, callback });\n    },\n\n    unlistenEventBus() {\n      this.eventBusListeners.forEach(({ event, callback}) => {\n        this.$events.$off(event, callback);\n      });\n    }\n  },\n}\n","import pick from \"lodash-es/pick\";\nimport values from \"lodash-es/values\";\nimport keyBy from \"lodash-es/keyBy\";\nimport omit from \"lodash-es/omit\";\nimport filter from \"lodash-es/filter\";\nimport find from \"lodash-es/find\";\nimport Field from './Field';\n\nexport default class FieldList {\n\n  constructor(fields) {\n    this.list = [];\n    this.byAttribute = {};\n\n    // Collect Field instances\n    fields.forEach(fieldConfig => {\n      let field = new Field(fieldConfig);\n      this.list.push(field);\n      this.byAttribute[field.attribute] = field;\n    });\n\n    // Collect dependencies and assign\n    this.list.forEach(field => {\n      if (!field.depends) {\n        return;\n      }\n\n      field.dependentFields = this.only(...field.depends);\n    });\n  }\n\n  /**\n   * Get all fields\n   *\n   * @returns {Field[]}\n   */\n  all() {\n    return this.list\n  }\n\n  /**\n   * @returns {Field}\n   */\n  get(attribute) {\n    return this.byAttribute[attribute];\n  }\n\n  /**\n   * @returns {Field}\n   */\n  find(predicate) {\n    return find(this.list, predicate);\n  }\n\n  /**\n   * @returns {Field[]}\n   */\n  only(...attributes) {\n    return values(pick(this.byAttribute, attributes))\n  }\n\n  /**\n   * @returns {Field[]}\n   */\n  except(...attributes) {\n    return values(omit(this.byAttribute, attributes))\n  }\n\n  /**\n   * @returns {Field[]}\n   */\n  filter(predicate) {\n    return filter(this.list, predicate)\n  }\n\n}\n","import Errors from '../utils/Errors';\nimport FieldList from \"../utils/FieldList\";\n\nexport default {\n  data() {\n    return {\n      fields: new FieldList([]),\n      errors: new Errors()\n    }\n  },\n\n  methods: {\n\n    /**\n     * Set new field list.\n     * Implemented form components should use this function when setting up fields.\n     *\n     * @param {Array} fields\n     */\n    setFields(fields) {\n      this.fields = new FieldList(fields);\n    },\n\n    /**\n     * Create FormData object for the model data.\n     * Used when data going to be sent as multipart/form-data\n     *\n     * @param {Object} model Source model\n     * @param {Array|null} only (Optional) List of fields to use instead of main fields\n     * @returns {FormData}\n     */\n    formData(model, only = null) {\n      let formData = new FormData();\n      let fields = only || this.fields.all();\n\n      fields.forEach(field => {\n        field.appendFormData(formData, model);\n      });\n\n      return formData;\n    },\n\n    /**\n     * Set new validation errors.\n     * Usually used when setting up error messages came from server.\n     *\n     * @param errors\n     */\n    setValidationErrors(errors) {\n      this.errors = new Errors(errors);\n    },\n\n    /**\n     * Reset field values for model. Sets initial field value.\n     *\n     * @param {Object} model\n     */\n    resetModel(model) {\n      this.fields.all().forEach(field => {\n        field.applyInitialValue(model);\n      });\n    }\n  }\n}\n","<template>\n  <input type=\"hidden\" :value=\"fieldValue\">\n</template>\n\n<script>\n  import { FieldMixin } from '../mixins';\n\n  export default {\n    name: 'FormHiddenField',\n    mixins: [FieldMixin],\n  }\n</script>\n","<template>\n\t<component\n\t\t:is=\"layoutComponent\"\n\t\t:field=\"field\"\n\t\t:errors=\"errors\">\n\t\t<template slot=\"field\">\n\t\t\t<input\n\t\t\t\t:id=\"field.attribute\"\n\t\t\t\t:dusk=\"field.attribute\"\n\t\t\t\t:type=\"inputType\"\n\t\t\t\t:min=\"inputMin\"\n\t\t\t\t:max=\"inputMax\"\n\t\t\t\t:step=\"inputStep\"\n\t\t\t\t:pattern=\"inputPattern\"\n\t\t\t\tv-model=\"fieldValue\"\n\t\t\t\tclass=\"form-control\"\n\t\t\t\t:class=\"errorClasses\"\n\t\t\t\t:placeholder=\"inputPlaceholder\"\n\t\t\t\t:readonly=\"inputReadonly\"\n\t\t\t\t:disabled=\"inputDisabled\"/>\n\t\t</template>\n\t</component>\n</template>\n\n<script>\n\timport { FieldMixin } from '../mixins';\n\n\texport default {\n\t\tname: 'FormTextField',\n\n\t\tmixins: [ FieldMixin ],\n\n\t\tprops: {\n\t\t\treadonly: {},\n\t\t\tdisabled: {},\n\t\t\tplaceholder: {},\n\t\t\tstep: {},\n\t\t\tmin: {},\n\t\t\tmax: {},\n\t\t\tpattern: {},\n\t\t},\n\n\t\tcomputed: {\n\t\t\t/**\n\t\t\t * Get the input type.\n\t\t\t */\n\t\t\tinputType() {\n\t\t\t\treturn this.field.type || 'text'\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get the input placeholder.\n\t\t\t */\n\t\t\tinputPlaceholder() {\n\t\t\t\treturn this.placeholder || this.field.placeholder\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get the input readonly state.\n\t\t\t */\n\t\t\tinputReadonly() {\n\t\t\t\treturn this.readonly || this.field.readonly\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get the input disabled state.\n\t\t\t */\n\t\t\tinputDisabled() {\n\t\t\t\treturn this.disabled || this.field.disabled\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get the input step amount.\n\t\t\t */\n\t\t\tinputStep() {\n\t\t\t\treturn this.step || this.field.step\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get the input minimum amount.\n\t\t\t */\n\t\t\tinputMin() {\n\t\t\t\treturn this.min || this.field.min\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get the input maximum amount.\n\t\t\t */\n\t\t\tinputMax() {\n\t\t\t\treturn this.max || this.field.max\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get the pattern that should be used for the field\n\t\t\t */\n\t\t\tinputPattern() {\n\t\t\t\treturn this.pattern || this.field.pattern\n\t\t\t},\n\t\t},\n\n\t\tmethods: {\n\t\t\tsanitizeValue(value) {\n\t\t\t\tif (this.field.type === 'number') {\n\t\t\t\t\treturn Number(value);\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t},\n\t\t},\n\t}\n</script>\n","<template>\n  <component\n    :is=\"layoutComponent\"\n    :field=\"field\"\n    :errors=\"errors\">\n    <template slot=\"field\">\n      <input\n        :type=\"inputType\"\n        :id=\"field.attribute\"\n        :dusk=\"field.attribute\"\n        :min=\"inputMin\"\n        :max=\"inputMax\"\n        :step=\"inputStep\"\n        v-model=\"fieldValue\"\n        class=\"form-control\"\n        :class=\"errorClasses\"\n        :placeholder=\"inputPlaceholder\"\n        :readonly=\"inputReadonly\"\n        :disabled=\"inputDisabled\"/>\n    </template>\n  </component>\n</template>\n\n<script>\n  import { FieldMixin } from '../mixins';\n\n  export default {\n    name: 'FormNumberField',\n\n    mixins: [FieldMixin],\n\n    props: {\n      readonly: {},\n      disabled: {},\n      placeholder: {},\n      step: {},\n      min: {},\n      max: {},\n    },\n\n    computed: {\n\n      /**\n       * Get the input type\n       */\n      inputType() {\n        return this.field.range ? 'range' : 'number';\n      },\n\n      /**\n       * Get the input placeholder.\n       */\n      inputPlaceholder() {\n        return this.placeholder || this.field.placeholder\n      },\n\n      /**\n       * Get the input readonly state.\n       */\n      inputReadonly() {\n        return this.readonly || this.field.readonly\n      },\n\n      /**\n       * Get the input disabled state.\n       */\n      inputDisabled() {\n        return this.disabled || this.field.disabled\n      },\n\n      /**\n       * Get the input step amount.\n       */\n      inputStep() {\n        return this.step || this.field.step\n      },\n\n      /**\n       * Get the input minimum amount.\n       */\n      inputMin() {\n        return this.min || this.field.min\n      },\n\n      /**\n       * Get the input maximum amount.\n       */\n      inputMax() {\n        return this.max || this.field.max\n      },\n    },\n  }\n</script>\n","<template>\n\t<component\n\t\t:is=\"layoutComponent\"\n\t\t:field=\"field\"\n\t\t:errors=\"errors\">\n\t\t<template slot=\"field\">\n\t\t\t<input\n\t\t\t\t:id=\"field.attribute\"\n\t\t\t\t:dusk=\"field.attribute\"\n\t\t\t\ttype=\"file\"\n\t\t\t\tref=\"inputElement\"\n\t\t\t\tv-on:input=\"input($event)\"\n\t\t\t\t:multiple=\"field.multiple || false\"\n\t\t\t\tclass=\"form-control\"\n\t\t\t\t:class=\"errorClasses\"\n\t\t\t\t:placeholder=\"inputPlaceholder\"\n\t\t\t\t:accept=\"field.mimeTypes\"\n\t\t\t/>\n\t\t</template>\n\t</component>\n</template>\n\n<script>\n\timport { FieldMixin } from '../mixins';\n\n\texport default {\n\t\tname: 'FormTextField',\n\n\t\tmixins: [ FieldMixin ],\n\n\t\tprops: {\n\t\t\tplaceholder: {}\n\t\t},\n\n\t\tcomputed: {\n\t\t\t/**\n\t\t\t * Get the input placeholder.\n\t\t\t */\n\t\t\tinputPlaceholder() {\n\t\t\t\treturn this.placeholder || this.field.placeholder\n\t\t\t}\n\t\t},\n\n\t\tmethods: {\n\n\t\t\tinput ($event) {\n\t\t\t\tlet files = []\n\t\t\t\tfor (let i = 0; i < $event.target.files.length; i++) {\n\t\t\t\t\tfiles.push($event.target.files[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.fieldValue = this.field.multiple ? files : files[0];\n\t\t\t\tthis.$refs.inputElement.value = '';\n\t\t\t}\n\n\t\t}\n\n\t}\n</script>\n","<template>\n\t<component\n\t\t:is=\"layoutComponent\"\n\t\t:field=\"field\"\n\t\t:errors=\"errors\">\n\t\t<template slot=\"field\">\n\t\t\t<select\n\t\t\t\t:id=\"field.name\"\n\t\t\t\tv-model=\"fieldValue\"\n\t\t\t\t:multiple=\"field.multiple || false\"\n\t\t\t\tclass=\"form-control\"\n\t\t\t\t:class=\"errorClasses\"\n\t\t\t\t:disabled=\"inputDisabled\">\n\t\t\t\t<option value=\"\" selected disabled>\n\t\t\t\t\t{{ field.placeholder || 'Choose an option' }}\n\t\t\t\t</option>\n\t\t\t\t<option\n\t\t\t\t\tv-for=\"option in field.options\"\n\t\t\t\t\t:value=\"option.value\"\n\t\t\t\t\t:selected=\"option.value == fieldValue\">\n\t\t\t\t\t{{ option.label }}\n\t\t\t\t</option>\n\t\t\t</select>\n\t\t</template>\n\t</component>\n</template>\n\n<script>\n\timport { FieldMixin } from '../mixins';\n\n\texport default {\n\t\tmixins: [ FieldMixin ],\n\n\t\tprops: {\n\t\t\tdisabled: {},\n\t\t},\n\n\t\tcomputed: {\n\t\t\t/**\n\t\t\t * Get the input disabled state.\n\t\t\t */\n\t\t\tinputDisabled() {\n\t\t\t\treturn this.disabled || this.field.disabled\n\t\t\t},\n\t\t}\n\t}\n</script>\n","<template>\n\t<component\n\t\t:is=\"layoutComponent\"\n\t\t:field=\"field\"\n\t\t:errors=\"errors\"\n\t\t:show-label=\"false\">\n\t\t<template slot=\"field\">\n\t\t\t<div v-for=\"(option, index) in field.options\"\n\t\t\t\t :key=\"option.value\"\n\t\t\t\t :class=\"radiosLayoutClass\"\n\t\t\t\t class=\"form-check\">\n\t\t\t\t<input\n\t\t\t\t\t:id=\"field.attribute + index\"\n\t\t\t\t\t:value=\"option.value\"\n\t\t\t\t\tv-model=\"fieldValue\"\n\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\tclass=\"form-check-input\" />\n\t\t\t\t<label :for=\"field.attribute + index\"\n\t\t\t\t\t   class=\"form-check-label\">\n\t\t\t\t\t{{ option.label }}\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t</template>\n\t</component>\n</template>\n\n<script>\n\timport { FieldMixin } from '../mixins';\n\n\texport default {\n\t\tname: 'RadiosField',\n\n\t\tmixins: [ FieldMixin ],\n\n\t\tprops: {\n\t\t\tradiosLayout: { type: String }\n\t\t},\n\n\t\tcomputed: {\n\t\t\tradiosLayoutClass() {\n\t\t\t\tlet layout = this.radiosLayout || this.field.radiosLayout;\n\t\t\t\treturn `form-check-${layout}`;\n\t\t\t}\n\t\t}\n\n\t}\n</script>\n","<template>\n\t<component\n\t\t:is=\"layoutComponent\"\n\t\t:field=\"field\"\n\t\t:errors=\"errors\"\n\t\t:show-label=\"false\">\n\t\t<template slot=\"field\">\n\t\t\t<div class=\"form-check\">\n\t\t\t\t<input\n\t\t\t\t\t:id=\"field.attribute\"\n\t\t\t\t\t:dusk=\"field.attribute\"\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tv-model=\"fieldValue\"\n\t\t\t\t\tclass=\"form-check-input\"\n\t\t\t\t\t:class=\"errorClasses\"\n\t\t\t\t\t:disabled=\"inputDisabled\"/>\n\t\t\t\t<label :for=\"field.attribute\">\n\t\t\t\t\t{{ field.label || fieldLabel }}\n\t\t\t\t</label>\n\t\t\t\t<div v-if=\"hasError\" class=\"invalid-feedback\">\n\t\t\t\t\t{{ errorMessages }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</template>\n\t</component>\n</template>\n\n<script>\n\timport { FieldMixin } from '../mixins';\n\n\texport default {\n\t\tname: 'CheckboxField',\n\n\t\tmixins: [ FieldMixin ],\n\n\t\tprops: {\n\t\t\tfieldLabel: { type: String },\n\t\t\tdisabled: {},\n\t\t},\n\n\t\tcomputed: {\n\t\t\t/**\n\t\t\t * Get the input disabled state.\n\t\t\t */\n\t\t\tinputDisabled() {\n\t\t\t\treturn this.disabled || this.field.disabled\n\t\t\t},\n\t\t},\n\n\n\t}\n</script>\n","<template>\n  <component\n    :is=\"layoutComponent\"\n    :field=\"field\"\n    :errors=\"errors\">\n    <template slot=\"field\">\n      <div\n        v-for=\"(option, index) in field.options\"\n        :key=\"option.value\"\n        :class=\"checkboxLayoutClass\"\n        class=\"form-check\">\n        <input\n          :id=\"field.attribute + index\"\n          :value=\"option.value\"\n          v-model=\"fieldValue\"\n          type=\"checkbox\"\n          class=\"form-check-input\"/>\n        <label\n          :for=\"field.attribute + index\"\n          class=\"form-check-label\">\n          {{ option.label }}\n        </label>\n      </div>\n    </template>\n  </component>\n</template>\n\n<script>\n  import isArray from 'lodash-es/isArray';\n  import { FieldMixin } from '../mixins';\n\n  export default {\n    name: 'CheckboxesField',\n\n    mixins: [FieldMixin],\n\n    props: {\n      checkboxLayout: {type: String}\n    },\n\n    computed: {\n      checkboxLayoutClass() {\n        let layout = this.checkboxLayout || this.field.checkboxLayout;\n        return `form-check-${layout}`;\n      }\n    },\n\n    created() {\n      if (!isArray(this.field.initialValue)) {\n        this.field.initialValue = [];\n      }\n\n      if (!isArray(this.value())) {\n        this.fill([]);\n      }\n    },\n  }\n</script>\n","<template>\n\t<component\n\t\t:is=\"layoutComponent\"\n\t\t:field=\"field\"\n\t\t:errors=\"errors\">\n\t\t<template slot=\"field\">\n\t\t\t<textarea\n\t\t\t\t:id=\"field.attribute\"\n\t\t\t\t:dusk=\"field.attribute\"\n\t\t\t\t:cols=\"inputCols\"\n\t\t\t\t:rows=\"inputRows\"\n\t\t\t\t:maxlength=\"inputMaxlength\"\n\t\t\t\tv-model=\"fieldValue\"\n\t\t\t\tclass=\"form-control\"\n\t\t\t\t:class=\"errorClasses\"\n\t\t\t\t:placeholder=\"inputPlaceholder\"\n\t\t\t\t:readonly=\"inputReadonly\"\n\t\t\t\t:disabled=\"inputDisabled\">\n\t\t\t</textarea>\n\t\t</template>\n\t</component>\n</template>\n\n<script>\n\timport { FieldMixin } from '../mixins';\n\n\texport default {\n\t\tname: 'FormTextareaField',\n\n\t\tmixins: [ FieldMixin ],\n\n\t\tprops: {\n\t\t\treadonly: {},\n\t\t\tdisabled: {},\n\t\t\tplaceholder: {},\n\t\t\tcols: {},\n\t\t\trows: {},\n\t\t\tmaxlength: {},\n\t\t},\n\n\t\tcomputed: {\n\n\t\t\t/**\n\t\t\t * Get the input readonly state.\n\t\t\t */\n\t\t\tinputReadonly() {\n\t\t\t\treturn this.readonly || this.field.readonly\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get the input disabled state.\n\t\t\t */\n\t\t\tinputDisabled() {\n\t\t\t\treturn this.disabled || this.field.disabled\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get the input placeholder.\n\t\t\t */\n\t\t\tinputPlaceholder() {\n\t\t\t\treturn this.placeholder || this.field.placeholder\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get the textarea cols.\n\t\t\t */\n\t\t\tinputCols() {\n\t\t\t\treturn this.cols || this.field.cols\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get the textarea rows.\n\t\t\t */\n\t\t\tinputRows() {\n\t\t\t\treturn this.rows || this.field.rows\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get the textarea maxlength.\n\t\t\t */\n\t\t\tinputMaxlength() {\n\t\t\t\treturn this.maxlength || this.field.maxlength\n\t\t\t},\n\t\t},\n\t}\n</script>\n","import * as components from './components';\nimport assign from 'lodash-es/assign';\nimport config from './config';\n\nexport default {\n\tinstall (Vue, options) {\n\t\tassign(config, options);\n\n\t\tObject.keys(components).forEach(function (name) {\n\t\t\tVue.component(name, components[name])\n\t\t})\n\t}\n}\n","let config = {\n  previewMaxWidth: 200,\n  previewMaxHeight: 200,\n  previewMinWidth: null,\n  previewMinHeight: null,\n  previewCrop: false,\n  googleKey: null,\n};\n\nexport default config;\n","<template>\n  <div\n    :class=\"{ 'field-attachment-preview-image': isImage }\"\n    :style=\"{ 'max-width': previewOptions.previewMaxWidth + 'px' }\"\n    class=\"field-attachment-preview\">\n    <img\n      v-if=\"isImage\"\n      :src=\"imagePreview\"\n      class=\"img-fluid mb-1\"/>\n    <a\n      v-if=\"attachment.url\"\n      :href=\"attachment.url\"\n      class=\"d-block\"\n      target=\"_blank\">\n      {{ attachment.filename }}\n    </a>\n    <div v-else>\n      {{ attachment.filename }}\n    </div>\n  </div>\n</template>\n\n<script>\n  import loadImage from 'blueimp-load-image';\n  import config from './config';\n  import assign from 'lodash-es/assign';\n  import pick from 'lodash-es/pick';\n\n  export default {\n    name: 'AttachmentPreview',\n\n    props: {\n      attachment: { type: Object, required: true },\n      options: { type: Object },\n    },\n\n    data: () => ({\n      imagePreview: null\n    }),\n\n    mounted() {\n      this.setImagePreview();\n    },\n\n    computed: {\n      isImage() {\n        return this.attachment.mime_type &&\n          this.attachment.mime_type.match(/image/);\n      },\n      previewOptions() {\n        return assign(pick(config, [\n          'previewMaxWidth',\n          'previewMaxHeight',\n          'previewMinWidth',\n          'previewMinHeight',\n          'previewCrop',\n        ]), this.options)\n      }\n    },\n\n    methods: {\n      setImagePreview() {\n        if (!this.isImage) {\n          return;\n        }\n\n        if (this.attachment.file instanceof File) {\n          loadImage(\n            this.attachment.file,\n            (canvas) => {\n              this.imagePreview = canvas.toDataURL();\n            },\n            {\n              canvas: true,\n              maxWidth: this.previewOptions.previewMaxWidth,\n              maxHeight: this.previewOptions.previewMaxHeight,\n              minWidth: this.previewOptions.previewMinWidth,\n              minHeight: this.previewOptions.previewMinHeight,\n              crop: this.previewOptions.previewCrop,\n            }\n          );\n        } else {\n          this.imagePreview = this.attachment.url;\n        }\n      }\n    },\n\n    watch: {\n      'attachment': function () {\n        this.setImagePreview();\n      }\n    },\n  }\n</script>\n","<template>\n  <component\n    :is=\"layoutComponent\"\n    :field=\"field\"\n    :errors=\"errors\">\n    <template slot=\"field\">\n      <div class=\"custom-file\">\n        <input\n          :id=\"field.attribute\"\n          :class=\"errorClasses\"\n          :dusk=\"field.attribute\"\n          :multiple=\"field.multiple || false\"\n          :accept=\"field.mimeTypes\"\n          ref=\"input\"\n          type=\"file\"\n          class=\"custom-file-input\"\n          @input=\"input($event)\">\n        <label\n          :for=\"field.attribute\"\n          class=\"custom-file-label\">{{ field.placeholder || 'Click to select files' }}</label>\n      </div>\n      <div\n        v-if=\"hasAttached && field.multiple\">\n        <draggable\n          :options=\"draggableOptions\"\n          v-model=\"sortables\"\n          class=\"field-attachments mt-4\">\n          <div\n            v-for=\"attachment in field.attached\"\n            :key=\"attachment.id\"\n            class=\"field-attachment field-attachment-draggable bg-light rounded p-2\">\n            <attachment-preview\n              :attachment=\"attachment\"\n              :options=\"previewOptions\" />\n            <button\n              type=\"button\"\n              @click.prevent=\"remove(attachment)\"\n              class=\"close rounded btn-remove bg-secondary\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n        </draggable>\n        <button\n          v-if=\"hasAttached && field.multiple\"\n          @click.stop.prevent=\"clear()\"\n          class=\"btn btn-sm btn-warning\">Clear all</button>\n      </div>\n      <div\n        v-if=\"hasAttached && !field.multiple\">\n        <div\n          class=\"field-attachments mt-4\">\n          <div class=\"field-attachment bg-light rounded p-2\">\n            <attachment-preview\n              :attachment=\"field.attached\"\n              :options=\"previewOptions\"/>\n            <button\n              type=\"button\"\n              @click.stop.prevent=\"clear()\"\n              class=\"close rounded btn-remove bg-secondary\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </template>\n  </component>\n</template>\n\n<script>\n  import draggable from 'vuedraggable';\n  import assign from 'lodash-es/assign';\n  import FieldMixin from '../mixins/FieldMixin';\n  import AttachmentPreview from './AttachmentPreview.vue';\n  import pick from 'lodash-es/pick';\n\n  function fileToAttached(file) {\n  return {\n    id: Math.random(),\n    file,\n    filename: file.name,\n    mime_type: file.type,\n    size: file.size,\n  };\n}\n\nexport default {\n  components: {\n    draggable,\n    AttachmentPreview,\n  },\n\n  mixins: [FieldMixin],\n\n  data() {\n    return {\n    };\n  },\n\n  computed: {\n    hasAttached() {\n      return this.field.multiple ?\n        !! this.field.attached.length :\n        !! this.field.attached;\n    },\n    draggableOptions() {\n      const options = { direction: 'horizontal' };\n      assign(options, this.field.draggableOptions);\n      return options;\n    },\n    previewOptions() {\n      return pick(this.field, [\n        'previewMaxWidth',\n        'previewMaxHeight',\n        'previewMinWidth',\n        'previewMinHeight',\n        'previewCrop',\n      ]);\n    },\n    sortables: {\n      get() {\n        return this.field.attached;\n      },\n      set(sorted) {\n        this.field.attached = sorted;\n        this.fieldValue = this.field.attached.map((attachment) => {\n          return attachment.file ? attachment.file : attachment.id;\n        });\n      }\n    },\n  },\n\n  created() {\n    if (this.field.multiple) {\n      // For correct reactivity and sorting\n      if (!this.field.attached) {\n        this.field.attached = [];\n      }\n\n      if (!this.fieldValue) {\n        this.fieldValue = [];\n      }\n    }\n  },\n\n  methods: {\n    remove(attachment) {\n      if (this.field.multiple) {\n        this.field.attached = this.field.attached.filter((a) => a.id !== attachment.id);\n        this.fieldValue = this.fieldValue.filter((id) => {\n          if (attachment.file) {\n            return id !== attachment.file;\n          }\n\n          return id !== attachment.id\n        });\n      } else {\n        this.field.attached = null;\n        this.fieldValue = null;\n      }\n    },\n    clear() {\n      if (this.field.multiple) {\n        this.field.attached = [];\n        this.fieldValue = [];\n      } else {\n        this.field.attached = null;\n        this.fieldValue = null;\n      }\n    },\n    input($event) {\n      const files = [];\n\n      for (let i = 0; i < $event.target.files.length; i += 1) {\n        files.push($event.target.files[i]);\n      }\n\n      this.field.attached = this.field.multiple ?\n        this.field.attached.concat(files.map(fileToAttached)) :\n        fileToAttached(files[0]);\n\n      this.fieldValue = this.field.multiple ? this.fieldValue.concat(files) : files[0];\n\n      this.$refs.input.value = '';\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  .field-attachments {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: flex-start;\n  }\n\n  .field-attachment {\n    position: relative;\n    margin-right: 1rem;\n    margin-bottom: 1rem;\n  }\n\n  .btn-remove {\n    position: absolute;\n    top: -.5rem;\n    right: -.5rem;\n    line-height: 100%;\n    height: 1.5rem;\n    width: 1.5rem;\n    opacity: 1;\n    color: white;\n  }\n\n  .field-attachment-preview {\n    font-size: 85%;\n  }\n\n  .field-attachment-draggable {\n    cursor: move;\n  }\n</style>\n","<template>\n  <component\n    :is=\"layoutComponent\"\n    :field=\"field\"\n    :errors=\"errors\">\n    <template slot=\"field\">\n      <editor\n        v-model=\"fieldValue\"\n        :options=\"options\"\n        class=\"editor-field\" />\n    </template>\n  </component>\n</template>\n\n<script>\nimport { quillEditor } from 'vue-quill-editor';\nimport assign from 'lodash-es/assign';\nimport FieldMixin from '../mixins/FieldMixin';\n\nexport default {\n  name: 'FormEditorField',\n\n  components: {\n    Editor: quillEditor,\n  },\n\n  mixins: [FieldMixin],\n\n  data() {\n    return {\n    };\n  },\n\n  computed: {\n    options() {\n      let options = {\n        modules: {\n          toolbar: [\n            ['bold', 'italic', 'underline', 'strike'], // toggled buttons\n            ['blockquote', 'code-block'],\n            [{ list: 'ordered' }, { list: 'bullet' }],\n            ['link', 'image'],\n            [{ size: ['small', false, 'large', 'huge'] }], // custom dropdown\n            [{ header: [1, 2, 3, 4, 5, 6, false] }],\n            [{ font: [] }],\n            [{ align: [] }],\n            ['clean'],\n          ],\n        },\n      };\n\n      assign(options, this.field.options);\n      assign(options.modules, this.field.modules);\n\n      return options;\n    }\n  }\n};\n</script>\n\n<style scoped>\n  .editor-field >>> .ql-editor {\n    height: 140px;\n  }\n</style>\n","<template>\n  <component\n    :is=\"layoutComponent\"\n    :field=\"field\"\n    :errors=\"errors\">\n    <template slot=\"field\">\n      <vue-google-autocomplete\n        v-if=\"googleLoaded\"\n        :id=\"field.attribute + '-address'\"\n        :placeholder=\"field.placeholder\"\n        :types=\"geocodeTypes\"\n        ref=\"address\"\n        classname=\"form-control\"\n        @placechanged=\"setAddressData\"\n        @keypress.enter.prevent />\n      <div\n        v-if=\"field.withMap\"\n        class=\"mt-2 embed-responsive embed-responsive-16by9\">\n        <div\n          ref=\"map\"\n          :id=\"field.attribute + '-map'\"\n          class=\"embed-responsive-item rounded\">\n          Map is loading ...\n        </div>\n      </div>\n    </template>\n  </component>\n</template>\n\n<script>\n  import VueGoogleAutocomplete from 'vue-google-autocomplete';\n  import FieldMixin from '../mixins/FieldMixin';\n  import defaults from 'lodash-es/defaults';\n  import config from './config';\n\n  export default {\n    name: 'FormLocationField',\n\n    mixins: [FieldMixin],\n\n    components: {\n      VueGoogleAutocomplete,\n    },\n\n    data: () => ({\n      googleLoaded: false,\n      map: null,\n      marker: null,\n      geocoder: null,\n    }),\n\n    computed: {\n      geocodeTypes() {\n        return this.field.types;\n      }\n    },\n\n    created() {\n      if (!this.field.initialValue) {\n        this.field.initialValue = {\n          address: null,\n          latlng: null,\n          zoom: null,\n        };\n      }\n\n      if (!this.fieldValue) {\n        this.field.applyInitialValue(this.model);\n      }\n\n      this.$watch('fieldValue.address', this.updateAddress);\n      this.$watch('fieldValue.latlng', this.updateMarker);\n      this.$watch('fieldValue.zoom', this.updateZoom);\n    },\n\n    mounted() {\n      if (window.google === undefined) {\n        this.loadGoogleMaps().then(() => {\n          this.googleLoaded = true;\n          this.$nextTick(this.initAutocomplete);\n        });\n      } else {\n        this.googleLoaded = true;\n        this.$nextTick(this.initAutocomplete);\n      }\n    },\n\n    methods: {\n      loadGoogleMaps() {\n        return new Promise((resolve) => {\n          let mapsScript = document.createElement('script');\n          mapsScript.onload = resolve;\n          mapsScript.setAttribute('src', `https://maps.googleapis.com/maps/api/js?key=${config.googleKey}&libraries=places`);\n          document.head.appendChild(mapsScript);\n        });\n      },\n      initAutocomplete() {\n        if (this.fieldValue && this.fieldValue.address) {\n          this.updateAddress();\n        }\n\n        if (this.field.withMap) {\n          this.initMap();\n        }\n      },\n      updateAddress() {\n        this.$refs.address.update(this.fieldValue.address);\n      },\n      initMap() {\n        const options = defaults(this.field.withMap, {\n          center: {lat: 41.299, lng: 69.24},\n          zoom: 1\n        });\n\n        if (this.fieldValue && this.fieldValue.latlng) {\n          const [lat, lng] = this.fieldValue.latlng.split(',').map(parseFloat);\n          options.center = {lat, lng};\n        }\n\n        if (this.fieldValue && this.fieldValue.zoom) {\n          options.zoom = this.fieldValue.zoom;\n        }\n\n        this.map = new google.maps.Map(this.$refs.map, options);\n\n        this.marker = new google.maps.Marker({\n          position: options.center,\n          map: this.map,\n          draggable: true,\n        });\n\n        this.geocoder = new google.maps.Geocoder;\n\n        this.marker.addListener('dragend', () => {\n          this.setAddressFromMarker();\n        });\n\n        this.map.addListener('zoom_changed', () => {\n          this.setZoomFromMap();\n        });\n      },\n      setAddressFromMarker() {\n        let position = this.marker.getPosition();\n        this.$set(this.fieldValue, 'latlng', [position.lat(), position.lng()].join(','));\n\n        this.geocoder.geocode({'location': position}, (results, status) => {\n          if (status === 'OK') {\n            this.setAddressFromGeocode(results);\n          } else {\n            console.error('Geocoder failed due to: ' + status);\n          }\n        });\n      },\n      setAddressFromGeocode(results) {\n        if (results[0]) {\n          this.$set(this.fieldValue, 'address', results[0].formatted_address);\n        }\n      },\n      setAddressData: function (addressData, placeResultData, id) {\n        this.$set(this.fieldValue, 'latlng', addressData.latitude + ',' + addressData.longitude);\n        this.$set(this.fieldValue, 'address', placeResultData.formatted_address);\n      },\n      updateMarker() {\n        if (!this.marker || !this.fieldValue.latlng) {\n          return;\n        }\n\n        let latlng = {\n          lat: parseFloat(this.fieldValue.latlng.split(',')[0]),\n          lng: parseFloat(this.fieldValue.latlng.split(',')[1]),\n        };\n\n        this.marker.setPosition(latlng);\n        this.map.panTo(latlng);\n        this.map.setZoom(this.fieldValue.zoom || 12);\n      },\n      updateZoom() {\n        if (!this.map || !this.fieldValue.zoom) {\n          return;\n        }\n\n        this.map.setZoom(this.fieldValue.zoom);\n      },\n      setMarkerFromResult(addressData) {\n        let latlng = {\n          lat: addressData.latitude,\n          lng: addressData.longitude,\n        };\n        this.marker.setPosition(latlng);\n        this.map.panTo(latlng);\n        this.map.setZoom(this.fieldValue.zoom || 12);\n      },\n      setZoomFromMap() {\n        this.$set(this.fieldValue, 'zoom', this.map.getZoom());\n      },\n    },\n  };\n</script>\n","<template>\n  <component\n    :is=\"layoutComponent\"\n    :field=\"field\"\n    :errors=\"errors\">\n    <template slot=\"field\">\n      <v-select\n        ref=\"select\"\n        :disabled=\"busy\"\n        :id=\"field.attribute\"\n        :options=\"options\"\n        :filterable=\"filterable\"\n        :placeholder=\"field.placeholder\"\n        v-model=\"selected\"\n        :class=\"errorClasses\"\n        :multiple=\"field.multiple || false\"\n        class=\"form-control\"\n        @search=\"onSearch\">\n        <template\n          slot=\"option\"\n          slot-scope=\"option\">\n          <img\n            v-if=\"option.image\"\n            :src=\"option.image\"\n            style=\"width: 45px\"\n            class=\"float-left mr-2 rounded\" />\n          <div>{{ option.label }}</div>\n          <div\n            v-if=\"option.extra\"\n            class=\"text-muted text-sm\">\n            {{ option.extra }}\n          </div>\n        </template>\n      </v-select>\n    </template>\n  </component>\n</template>\n\n<script>\n  import map from 'lodash-es/map';\n  import defaults from 'lodash-es/defaults';\n  import debounce from 'lodash-es/debounce';\n  import castArray from 'lodash-es/castArray';\n  import find from 'lodash-es/find';\n  import head from 'lodash-es/head';\n  import isEqual from 'lodash-es/isEqual';\n  import uniqBy from 'lodash-es/uniqBy';\n  import vSelect from 'vue-select';\n  import FieldMixin from '../mixins/FieldMixin';\n\n  export default {\n    components: {\n      vSelect,\n    },\n\n    mixins: [FieldMixin],\n\n    data() {\n      return {\n        options: [],\n        params: {},\n        busy: false,\n      };\n    },\n\n    computed: {\n      selected: {\n        get() {\n          const selected = [];\n          const values = this.fieldValue === null || this.fieldValue === undefined\n            ? []\n            : castArray(this.fieldValue);\n          values.forEach((value) => {\n            selected.push(find(this.options, {value}) || this.getMissedOption(value));\n          });\n\n          if (this.field.multiple) {\n            return uniqBy(selected, 'value');\n          }\n\n          return head(selected);\n        },\n        set(option) {\n          if (this.field.multiple) {\n            const values = map(option, 'value');\n            if (!isEqual(values, this.fieldValue)) {\n              this.fieldValue = uniqBy(values);\n            }\n            return;\n          }\n          this.fieldValue = option ? option.value : null;\n        },\n      },\n      filterable() {\n        return !this.field.ajax;\n      }\n    },\n\n    created() {\n      // Take initial options from field config\n      // It could contain initially selected option\n      this.options = this.field.options || [];\n      this.params = defaults(this.field.source ? this.field.source.params : {}, {\n        per_page: 9,\n      });\n\n      this.fetch = debounce(() => {\n        this.loading(true);\n\n        const promise = this.$http({\n          url: this.field.source.url,\n          params: this.params,\n        });\n\n        promise\n          .then((response) => {\n            this.setOptions(response.data.data);\n          })\n          .finally(() => {\n            this.loading(false);\n          });\n\n        return promise;\n      }, 300);\n    },\n\n    mounted() {\n      if (this.field.preload) {\n        this.fetch();\n      }\n    },\n\n    methods: {\n      loading(value = true) {\n        this.$refs.select.toggleLoading(value);\n      },\n      onSearch(search) {\n        if (!this.field.ajax) {\n          return;\n        }\n        this.params[this.field.queryParam || 'query'] = search;\n        this.fetch();\n      },\n      getMissedOption(value) {\n        return {\n          value,\n          label: this.$refs.select && this.$refs.select.mutableLoading ? '...' : value,\n        };\n      },\n      setOptions(options) {\n        let preserveOptions = castArray(this.selected);\n        this.options = uniqBy(preserveOptions.concat(options), 'value');\n      }\n    },\n  };\n</script>\n\n<style lang=\"scss\">\n  .form-control.v-select {\n    padding: 0 10px;\n    height: auto;\n    min-height: calc(2.25rem + 2px);\n\n    .dropdown-toggle {\n      border: none;\n      padding: 0;\n\n      &::after {\n        display: none;\n      }\n\n      input[type=search] {\n        margin: 0;\n        height: auto;\n        min-height: calc(2.25rem + 2px);\n      }\n    }\n\n    .selected-tag {\n      margin-top: 3px;\n      margin-bottom: 5px;\n    }\n\n    .vs__selected-options {\n      margin-left: -9px;\n      padding: 0;\n    }\n\n    .vs__actions {\n      padding-right: 0;\n    }\n  }\n</style>\n","import assign from 'lodash-es/assign';\nimport config from './config';\nimport * as components from './index';\n\nexport default {\n  install (Vue, options) {\n    assign(config, options);\n\n    Object.keys(components).forEach(function (name) {\n      Vue.component(name, components[name])\n    });\n  }\n}\n"],"names":["values","Vue","config","components"],"mappings":"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"}